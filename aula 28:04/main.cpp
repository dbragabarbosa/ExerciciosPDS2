// VAMOS APRENDER MAIS SOBRE TADS
// AGORA PRECISAMOS ENTENDER UM POUCO MAIS SOBRE A MEMÓRIA DO COMPUTADOR 

// O COMPUTADOR TEM DIFERENTES TIPO DE MEMÓRIAS. EX: SSD, CHIP

// O CONTEÚDO DA AULA É ALOCAÇÃO DINÂMICA

// TODO VETOR É UM PONTEIRO PARA A PRIMEIRA POSIÇÃO DAS POSIÇÕES DE MEMÓRIA ALOCADAS



#include <iostream>

using namespace std;


float media (float x, float y, float z)
{
    float s = x + y + z;
    float m = s / 3.0;
    return m;
}


int main()   // ANTES DA FUNÇÃO MAIN EXECUTAR, TODAS AS VARIÁVEIS JÁ TEM QUE ESTAR ALOCADAS, ESPERANDO PARA SER UTILIZADAS
{
    // int v[5];   // POR ESSE MOTIVO, SEMPRE PRECISAMOS ESPECIFICAR O TAMANHO DE UM ARRAY NA HORA DE DECLARÁ-LOS 
    
    int n;
    cin >> n;

    // int v[n];  // DESSA FORMA NÃO SERIA POSSÍVEL EMPILHAR AS POSIÇÕES DE MEMÓRIA ANTES DO PROGRAMA EXECUTAR 

    float* v = new float[n];  // v IRÁ GUARDAR A PRIMEIRA POSIÇÃO 
    // V[0], V[1] E EM DIANTE SÓ SERÁ ALOCADO DEPOIS QUE O PROGRAMA JÁ ESTIVER EXECUTANDO
    // POR CONTA DISSO, ELE SERÁ ALOCADO NO HEAP

    // PILHA  -->   ALOCA AS VARIÁVEIS ANTES DO PROGRAMA EXECUTAR
    // HEAP   -->   ALOCA AS VARIÁVEIS EM TEMPO DE EXECUÇÃO


    // SE VOCÊ QUER TRANSPORTAR DADOS DE UMA FUNÇÃO PARA OUTRA, VC PRECISA USAR ALOCAÇÃO DINÂMICA
    // SE VC USA NEW NA SUA FUNÇÃO, AQUELE ESPAÇO DE MEMÓRIA CONTINUA ALOCADA ATÉ O FIM DO PROGRAMA, A NÃO SER QU VC DIGA EXPLICITAMENTE QUE NÃO QUER MAIS
    // EX:
    delete [] v;   // TODA FUNÇÃO QUE ESCREVE new, TAMBÉM DEVE ESCREVER delete, PARA VC SEMPRE DESALOCAR A MEMÓRIA ALOCADA 

    cout << &v[0] << endl;
    cout << v << endl;









    return 0;
}